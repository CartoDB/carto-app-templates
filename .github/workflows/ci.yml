name: CI

on:
  push:
    branches: [main]
    tags: ["*"]

  pull_request:
    branches: [main]

jobs:
  build:
    name: Build [Node.js ${{ matrix.node-version }}]
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        include:
          - node-version: 18.x
            publish: false
          - node-version: 20.x
            publish: true # TODO
          - node-version: 22.x
            publish: false

    env:
      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      ##########################################################################
      # Build
      ##########################################################################

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install
        run: yarn install

      - name: Lint
        run: yarn lint

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test

      ##########################################################################
      # Publish
      ##########################################################################

      - name: Check tag format
        id: check-tag-format
        if: startsWith(github.ref, 'refs/tags/') && matrix.publish
        uses: nowsprinting/check-version-format-action@v4

      - name: Exit on invalid tag format
        if: startsWith(github.ref, 'refs/tags/') && !steps.check-tag-format.outputs.is_valid && matrix.publish
        run: echo "Tag must follow SemVer convention. Aborting." && exit 1

      - name: Get release type
        if: startsWith(github.ref, 'refs/tags/') && matrix.publish
        id: get-release-type
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const regex = /(alpha|beta)/
            const refName = context.ref.replace('refs/tags/', '')
            console.log(`Ref tag: ${refName}`)
            const releaseTypeMatch = refName.match(regex)
            if (!releaseTypeMatch) {
              releaseType = 'latest'
            } else {
              releaseType =  releaseTypeMatch[0]
            }
            console.log(`Release type: ${releaseType}`)
            return releaseType

      - name: Set version from tag to environment variable
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Get version strategy
        if: startsWith(github.ref, 'refs/tags/') && matrix.publish
        run: |
          CURRENT_VERSION=$(jq -r '.version' packages/create-common/package.json)
          NEW_VERSION=${{ env.RELEASE_VERSION }}

          if [[ -z "$NEW_VERSION" ]]; then
            echo "Error: You must provide the new version as an argument."
            exit 1
          fi

          IFS='.' read -r CUR_MAJOR CUR_MINOR CUR_PATCH <<< "$(echo $CURRENT_VERSION | cut -d'-' -f1)"
          CUR_PRERELEASE=$(echo "$CURRENT_VERSION" | grep -oP '(?<=-).*')

          IFS='.' read -r NEW_MAJOR NEW_MINOR NEW_PATCH <<< "$(echo $NEW_VERSION | cut -d'-' -f1)"
          NEW_PRERELEASE=$(echo "$NEW_VERSION" | grep -oP '(?<=-).*')

          VERSION_STRATEGY=""
          # Detect the type of version change
          if [[ "$NEW_MAJOR" -gt "$CUR_MAJOR" ]]; then
            VERSION_STRATEGY="major"
            echo "Strategy: Major version update (X.0.0)"
          elif [[ "$NEW_MINOR" -gt "$CUR_MINOR" ]]; then
            VERSION_STRATEGY="minor"
            echo "Strategy: Minor version update (0.X.0)"
          elif [[ "$NEW_PATCH" -gt "$CUR_PATCH" ]]; then
            VERSION_STRATEGY="patch"
            echo "Strategy: Patch version update (0.0.X)"
          elif [[ -n "$NEW_PRERELEASE" ]] && [[ "$NEW_PRERELEASE" != "$CUR_PRERELEASE" ]]; then
            VERSION_STRATEGY="prerelease"
            echo "Strategy: Pre-release update (0.0.0-X)"
          else
            VERSION_STRATEGY="slkip"
            echo "Strategy: No version increase detected, skip: Yarn prepare version"
          fi

          echo "VERSION_STRATEGY=${VERSION_STRATEGY}" >> $GITHUB_ENV

      # TODO: Enable after reaching 1.0.0.
      # This may indicate that the tag set has a typo, e.g., alpah, betta, etc.
      # - name: Verify tag format
      #   if: steps.check-tag-format.outputs.is_stable == 'false' && steps.get-release-type.outputs.result == 'latest'
      #   run: echo "Tag set may be incorrect. Please, review" && exit 1

      - name: Configure yarn to publish packages
        if: startsWith(github.ref, 'refs/tags/') && matrix.publish
        env:
          # The following token has been manually issued in the CartoDB
          # organization for npmjs.com
          NODE_AUTH_TOKEN: ${{ secrets.NPM_CARTODB_AUTH_TOKEN }}
        run: |
          yarn config set npmPublishRegistry "https://registry.npmjs.org/"
          yarn config set npmAuthToken "${NODE_AUTH_TOKEN}"

      - name: Yarn prepare version
        if: startsWith(github.ref, 'refs/tags/') && matrix.publish && env.VERSION_STRATEGY != 'skip'
        env:
          RELEASE_TYPE: ${{ steps.get-release-type.outputs.result }}
        run: |
          set -x
          for d in $(ls packages);
          do
            echo "Package: $d"
            yarn version ${{ env.VERSION_STRATEGY }}
            yarn postversion
          done

      # - name: Ignore changes to .yarnrc.yml
      #   if: startsWith(github.ref, 'refs/tags/') && matrix.publish
      #   run: git update-index --assume-unchanged .yarnrc.ymlsss

      - name: Publish package with Lerna
        if: startsWith(github.ref, 'refs/tags/') && matrix.publish
        env:
          RELEASE_TYPE: ${{ steps.get-release-type.outputs.result }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_CARTODB_AUTH_TOKEN }}
        run: |
          set -x
          yarn lerna publish from-git --yes --dist-tag ${RELEASE_TYPE}

